import telebot
from flask import Flask, request
from config import BOT_TOKEN, COURSES, CHANNELS, ADMIN_CHAT_ID, WEBHOOK_URL

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_course_choice = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = telebot.types.InlineKeyboardMarkup()
    for key, course in COURSES.items():
        markup.add(telebot.types.InlineKeyboardButton(course["name"], callback_data=f"course_{key}"))
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
def handle_course_selection(call):
    course_key = call.data.split("_")[1]
    course = COURSES[course_key]
    user_course_choice[call.from_user.id] = course_key

    if course["price"] == 0:
        try:
            invite_link = bot.create_chat_invite_link(CHANNELS[course_key], member_limit=1).invite_link
            bot.send_message(call.message.chat.id, f"‚úÖ –û—Å—å –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É *{course['name']}*:\n{invite_link}", parse_mode="Markdown")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–∞–π—Ç: {e}")
    else:
        bot.send_message(
            call.message.chat.id,
            f"""üí≥ –°–ø–ª–∞—Ç–∏ *{course['price']} –≥—Ä–Ω* –Ω–∞ –∫–∞—Ä—Ç–∫—É: `4441 1144 2233 4455`

üì© –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞–ø–∏—à–∏ /confirm —ñ –Ω–∞–¥–∞–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É.

–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.""",
            parse_mode="Markdown"
        )

# –û–±—Ä–æ–±–∫–∞ /confirm
@bot.message_handler(commands=["confirm"])
def handle_confirm(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    course_key = user_course_choice.get(user_id)

    if not course_key:
        bot.send_message(message.chat.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –∫—É—Ä—Å.")
        return

    course = COURSES[course_key]
    text = f"""üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} —Ö–æ—á–µ –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É *{course['name']}*.

‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏: /confirm_{user_id}_{course_key}
‚ùå –í—ñ–¥–∫–ª–∏–∫–∞—Ç–∏: /revoke_{user_id}
"""
    bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")
    bot.send_message(message.chat.id, "‚è≥ –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É (–∞–¥–º—ñ–Ω)
@bot.message_handler(commands=['confirm_'])
def admin_confirm_access(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return

    try:
        _, user_id, course_key = message.text.split("_")
        user_id = int(user_id)
        invite_link = bot.create_chat_invite_link(CHANNELS[course_key], member_limit=1).invite_link
        bot.send_message(user_id, f"‚úÖ –î–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É *{COURSES[course_key]['name']}*:\n{invite_link}", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –í—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É (–∞–¥–º—ñ–Ω)
@bot.message_handler(commands=['revoke_'])
def admin_revoke(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return

    try:
        _, user_id = message.text.split("_")
        user_id = int(user_id)
        bot.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ ‚Äî –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# Webhook endpoint
@app.route('/', methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    else:
        return "Invalid", 403

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
