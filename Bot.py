import os
from flask import Flask, request
import telebot
from telebot import types
from config import BOT_TOKEN, COURSES, CHANNELS, ADMIN_CHAT_ID

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
user_state = {}  # –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

# --- –ú–µ–Ω—é ---
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(course['name']) for course in COURSES.values()]
    markup.add(*buttons)
    bot.send_message(chat_id, "üëã –û–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=markup)


def show_course_menu(chat_id, course_id):
    course = COURSES[course_id]
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
        types.KeyboardButton("üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –æ–ø–ª–∞—Ç—ñ"),  # ‚úÖ –î–æ–¥–∞–ª–∏ –∫–Ω–æ–ø–∫—É
        types.KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏"),
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    bot.send_message(chat_id, f"üìò {course['name']}", reply_markup=markup)


# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ ---
def handle_successful_payment(user_id, course_id):
    try:
        chat_id = CHANNELS.get(course_id)
        if not chat_id:
            bot.send_message(user_id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        invite = bot.create_chat_invite_link(
            chat_id=chat_id,
            member_limit=1,
            creates_join_request=False
        )
        bot.send_message(user_id, f"‚úÖ –î–æ—Å—Ç—É–ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite.invite_link}")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ –¥–æ—Å—Ç—É–ø—É:\n{e}")
        print(f"[ERROR] handle_successful_payment: {e}")


# --- –ö–æ–º–∞–Ω–¥–∏ ---
@bot.message_handler(commands=['start'])
def start(message):
    user_state.pop(message.chat.id, None)
    show_main_menu(message.chat.id)


@bot.message_handler(func=lambda m: m.text.startswith("/confirm_"))
def confirm_payment_command(message):
    try:
        parts = message.text.strip().split("_")
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: /confirm_USERID_COURSEID")
            return
        user_id, course_id = parts[1], parts[2]
        handle_successful_payment(int(user_id), course_id)
        bot.reply_to(message, "‚úÖ –î–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É –≤–∏–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    except Exception as e:
        print(f"[ERROR] confirm_payment_command: {e}")
        bot.reply_to(message, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –æ–ø–ª–∞—Ç–∏.")


# --- Callback –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_payment"))
def confirm_payment_callback(call):
    try:
        cid = call.data.split(":")[1]
        user = call.from_user
        chat_id = call.message.chat.id

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞—è–≤–∫—É
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username or '–Ω–µ–º–∞—î'}\n"
            f"ID: {user.id}\n"
            f"–ö—É—Ä—Å: {COURSES[cid]['name']}\n"
            f"–°—É–º–∞: {COURSES[cid]['price']}\n"
            f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏: /confirm_{user.id}_{cid}"
        )

        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        bot.send_message(chat_id, "üîÑ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞.")
    except Exception as e:
        print(f"[ERROR] confirm_payment_callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(func=lambda message: not message.text.startswith("/"))
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()

    for cid, course in COURSES.items():
        if text == course['name']:
            user_state[chat_id] = cid
            show_course_menu(chat_id, cid)
            return

    if chat_id in user_state:
        cid = user_state[chat_id]
        course = COURSES[cid]

        if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            bot.send_message(chat_id, f"*{course['name']}*\n\n{course['description']}", parse_mode="Markdown")

        elif text == "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è":
            # ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–∞–π–ª
            bot.send_message(chat_id, "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –æ–ø–ª–∞—Ç—ñ:\n1Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å —ñ –Ω–∞–∂–º–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç–∏.\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥—ñ—Ç—å –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É –Ω–∞ –∫–∞—Ä—Ç—É —ñ –Ω–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É *‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤.\n3Ô∏è‚É£ –ü–∏–π –≤–æ–¥—É üíß.\n\nüí™ –£—Å–ø—ñ—Ö—ñ–≤!")
            # üìÇ –Ø–∫—â–æ —Ç—Ä–µ–±–∞ —Ñ–∞–π–ª:
            # bot.send_document(chat_id, open('instructions.pdf', 'rb'))

        elif text == "üí≥ –ö—É–ø–∏—Ç–∏":
            if course['price'] == 0:
                handle_successful_payment(chat_id, cid)
                return

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data=f"confirm_payment:{cid}"))
            bot.send_message(
                chat_id,
                f"""üí≥ –°–ø–ª–∞—Ç–∏ *{course['price']} –≥—Ä–Ω* –Ω–∞ –∫–∞—Ä—Ç—É: `4441 1144 2233 4455`

–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.""",
                parse_mode="Markdown",
                reply_markup=markup
            )

        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user_state.pop(chat_id, None)
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –º–µ–Ω—é.")
    else:
        bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑ –º–µ–Ω—é.")


# --- Flask Webhook ---
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'Invalid content-type', 403


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    bot.remove_webhook()
    WEBHOOK_URL = os.getenv("WEBHOOK_URL") or f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
